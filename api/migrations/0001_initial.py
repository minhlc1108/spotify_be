# Generated by Django 4.2.9 on 2025-04-17 08:20

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Album",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="albums/"),
                ),
                ("release_date", models.DateField()),
            ],
            options={
                "db_table": "album",
                "ordering": ["release_date"],
            },
        ),
        migrations.CreateModel(
            name="Artist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "gender",
                    models.CharField(
                        choices=[("M", "Male"), ("F", "Female")], max_length=1
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="artists/"),
                ),
                ("bio", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "artist",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "genre",
            },
        ),
        migrations.CreateModel(
            name="Playlist",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="playlists/"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "playlist",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="email address"
                    ),
                ),
                ("display_name", models.CharField(blank=True, max_length=150)),
                (
                    "role",
                    models.CharField(
                        choices=[("user", "User"), ("admin", "Admin")],
                        default="user",
                        max_length=10,
                    ),
                ),
                ("dob", models.DateField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="custom_user_groups",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="custom_user_groups",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": ["created_at"],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Library",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="library",
                        serialize=False,
                        to="api.user",
                    ),
                ),
            ],
            options={
                "db_table": "library",
            },
        ),
        migrations.CreateModel(
            name="Track",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        unique=True,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("lyrics", models.TextField(blank=True)),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="tracks/image/"),
                ),
                ("audio_file", models.FileField(upload_to="tracks/audio/")),
                (
                    "video_file",
                    models.FileField(blank=True, null=True, upload_to="tracks/video/"),
                ),
                ("play_count", models.PositiveBigIntegerField(default=0)),
                ("release_date", models.DateField()),
                (
                    "album",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="tracks",
                        to="api.album",
                    ),
                ),
                (
                    "artists",
                    models.ManyToManyField(
                        related_name="tracks_artists", to="api.artist"
                    ),
                ),
                (
                    "genres",
                    models.ManyToManyField(
                        related_name="tracks_genres", to="api.genre"
                    ),
                ),
            ],
            options={
                "db_table": "track",
                "ordering": ["release_date"],
            },
        ),
        migrations.CreateModel(
            name="PlaylistTrack",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "order",
                    models.PositiveIntegerField(
                        default=0, help_text="Position in playlist (1-based index)"
                    ),
                ),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                (
                    "playlist",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.playlist"
                    ),
                ),
                (
                    "track",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.track"
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.AddField(
            model_name="playlist",
            name="owner",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="playlists",
                to="api.user",
            ),
        ),
        migrations.AddField(
            model_name="playlist",
            name="tracks",
            field=models.ManyToManyField(
                related_name="tracks_playlists",
                through="api.PlaylistTrack",
                to="api.track",
            ),
        ),
        migrations.AddField(
            model_name="album",
            name="artists",
            field=models.ManyToManyField(
                related_name="albums_artists", to="api.artist"
            ),
        ),
        migrations.AddField(
            model_name="album",
            name="genres",
            field=models.ManyToManyField(related_name="albums_genres", to="api.genre"),
        ),
        migrations.AddIndex(
            model_name="track",
            index=models.Index(fields=["title"], name="track_title_63255f_idx"),
        ),
        migrations.AddIndex(
            model_name="track",
            index=models.Index(
                fields=["release_date"], name="track_release_80dde6_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="playlisttrack",
            constraint=models.UniqueConstraint(
                fields=("playlist", "order"), name="unique_order_per_playlist"
            ),
        ),
        migrations.AddIndex(
            model_name="playlist",
            index=models.Index(fields=["title"], name="playlist_title_f77965_idx"),
        ),
        migrations.AddIndex(
            model_name="playlist",
            index=models.Index(
                fields=["created_at"], name="playlist_created_1ee2c9_idx"
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="followed_artists",
            field=models.ManyToManyField(
                blank=True, related_name="followers", to="api.artist"
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="liked_tracks",
            field=models.ManyToManyField(related_name="liked_by_user", to="api.track"),
        ),
        migrations.AddField(
            model_name="library",
            name="saved_albums",
            field=models.ManyToManyField(
                blank=True, related_name="album_saved_by_users", to="api.album"
            ),
        ),
        migrations.AddField(
            model_name="library",
            name="saved_playlists",
            field=models.ManyToManyField(
                blank=True, related_name="playlist_saved_by_users", to="api.playlist"
            ),
        ),
        migrations.AddIndex(
            model_name="album",
            index=models.Index(fields=["title"], name="album_title_82714c_idx"),
        ),
        migrations.AddIndex(
            model_name="album",
            index=models.Index(
                fields=["release_date"], name="album_release_d3585b_idx"
            ),
        ),
    ]
